There was a discussion about the memcached client roadmaps at the Drizzle Developer Days in Seattle, August 2009.


== Memcached Drivers ==

  * dsal: please take driver off site request
    * action: to go kill the things wrapping libmemcache, in particular the wiki
      * this applies to distributions too (mtaylor)
  * dsal need a redit of drivers or something like that
  * Java driver is in good shape
    * krow: need a set of tests for partitioning; need to find a way to make these sets of tests (both libmemcached and spymemcached have them) 
      * krow: there was a problem in how the distribution in libketema worked, fixed about 6 months ago
      * krow: other question is about multiple socket connections; you get a higher throughput with a larger SMP, whalin client does this; dsal: didn't find a significant difference

=== Roadmap ===
  * libmemcached roadmap is to add in-process caching and later a shared memory cache (for instance, to address Apache type)
  * libmemcached replication work, when going to do an insert, it goes to multiple nodes then go grab it from a second node; compatible with consistent hashing if rate of growth 
    * php driver has picked this up
  * other longer term thoughts
    * callback interface, idea here is to start using memcached protocol (binary only) with other 
      * eday: is this a stateful/reentrant interface; trondn: it's non-blocking, but just provides notifications on sockets... then you can use libevent; steveyen: is the callback non-blocking too?  would like that
      * steveyen: with the callback interface, is this for use on the client side too?  krow: there would need to be some restructuring to allow the embedded engine to be able to allow the request to be highjacked; eday: not sure how much you're looking to refactor but could look at function pointers on stack
        * long, long discussion about non-blocking changes to libmemcached and whether or not that's worthwhile; eday opinion: this should exist, it'll work for higher level languages then... krow opinion: the only people asking for this tend to be writing in C and there the answer is spin off a thread

steveyen it seems with libmemcached the client is morphing, does it make sense to rename this
  * client 
  * embedded server
  * protocol handler with callback interfaces

  TODO: main()

krow: no, doesn't make sense to rename.... it's called libmemcached but it's becoming more than a client library

== Other memcached Thoughts ==
dsal: URL meta discussion, this would facilitate some of the SASL needs.  have multitenancy, authentication, different protocols; assume binary and failback to ascii
memcache://user:pass@host:port

krow: been wanting to add centralized configuration; there's a whole 'how do you keep stuff going' problem; it would be nice to have a callback for this sort of thing

  * driver for tangasol coherence plugin project
  * driver for JBoss cache

krow: need to do more docs/marketing/drivers

  * Range Query; krow: it's now in the specification (RFC style); someone should build a reference implementation here in the next year or so