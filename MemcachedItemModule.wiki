Memcached Internals - Item Module

Some notes on the the Item 'module' (items.c/h).

The Item module manages items and is independent of higher-level protocol/network worries.  You might think of it as a hashtable with added eviction and expiry semantics.  That is, it knows of all the usual, low-level hashtable-like gets/update/delete/replace semantics that you might expect but also tracks expiry timestamps and tracks LRU lists for eviction management.

For eample, item_get() won't return expired items to its callers.

It's built upon the lower-level functionality of the basic hashtable (assoc.c/h) and the slab allocator (see: MemcachedSlabAllocator).

Interface-wise, some apparent rules...

 * Higher-level code should be sure to call item_remove().  item_remove would probably be better renamed or thought of as 'item_release'.  item_remove() decrements a reference counter, and frees up item memory (back into the slab allocator) if that item is not otherwise in use (or 'linked').
  * Higher-level code should not call item_free() directly, and consider item_free() to be just a private internal, item module function.
 * When an item is 'linked' (has the state flag ITEM_LINKED), it means the item is hooked into the hashtable and LRU lists.
 * Higher-level code (in memcached.c) is responsible for protocol-specific, higher semantics (add/replace/append/prepend/incr/decr).
 * Although cas id's are generated by the items module, only higher-level code (memcached.c) seems to check the CAS values.

Back to MemcachedInternals