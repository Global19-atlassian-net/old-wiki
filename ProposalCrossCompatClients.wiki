#summary Cross compatibility for clients

_note: This is page is meant for discussion_

= Implementing Cross platform Serialisation Support =

== Current state of serialisation ==

    * Memcached Flags
    * Advanced flags information, including serialisation specific flags: [Link to file 'Serialisation Flags.ods'. Click to edit.]

Proposed approach for possible cross-platform support
Initial work to improve chances of success.

    * From the above links one can see that whilst there is no clear winner for the values of flags in memcached clients, the following two values are reasonably consistent:
          * '1' for Serialized
          * '2' for Compressed
          * '3' for Compressed+Serialised
          * '0' for Neither compressed or serialised
    * It would be sensible to try and ensure that all clients correctly set and respect these 'special' flag values to encourage inter-operability between clients.

== Cross client usage scenarios ==

    * There are three cross-client scenarios (given just two clients, obviously this can be extended to multiple combinations with more nodes!) :
          * Two clients the same.
          * Two clients that are different
          * Two clients that are different but on compatible platforms (two Java Clients or two C# clients for example)
    * There are two 'serialisation' scenarios
          * Both clients share same serialisation routine,
          * Both clients have different serialisation routine.
    * On the mailing list it is proposed that we do not have a need to support multiple active serialisation approaches between clients, an all-or-nothing approach can be taken where
          * All clients use the same 'compatible' serialisation mechanism
          * If a specific application/platform wanted to either mix serialisation approaches or provide custom serialisation then this should be supported.

== Proposed approach ==

It is proposed that the current clients aim to provide a serialisation and de-serialisation hook (transcoders?) to allow development of custom transcoders, once these hooks are in place it then becomes a 'trivial' requirement to ensure that when working with a mixed memcached platform (clients) that all the clients use a transcoder that is compatible.
Clearly not all platforms share the same primitive types so no 'cross-platform' serialisation approach will solve 100% of the cases, but a 80% solution will help the majority of people who may have issues in this area.

The current most popular approach on the mailing list so far appears to be to use JSON strings encoded asa UTF8 byte-array as the 'common' data stored in the cache and understandable by the majority of languages realistically likely to be using memcached (C/C++/PHP/Perl/Python/Java/Ruby/C# etc.).
But why not write a layer around each client?
Note the approach of using 'transcoders' does not whatsoever preclude client authors from writing clients which work differently/more efficiently to other clients, all I'm proposing here is to support an out-of-the-box simplified approach to sharing cached data between common platforms, we cannot realistically expect this to satisfy all requirements (performance?) but I hope we can agree that it is in everyone's interest to provide some mechanism to easily integrate clients in a memcached environment.

== Example use-case ==

My company Widgets&Sprockets has a distributed SOA architecture that uses a brokerage object for distributing web service traffic across several hundred services. Large portions of the respones to this traffic can be cached in the brokerage object (they are just xml documents stored as UTF8 encoded strings). These requests are optomised by first checking the cache before even hitting the brokerage object, sadly however the company has a legacy architecture leading to some of the calls being sent to the brokerage object coming from Java and some from C#. Currently it is not a trivial task to retrieve the XML documents from the cache from both Java & C# without some heavy patching.
The two clients chosen for this use-case are the excellent C# memcached client library Enyim.Memcached and the fabulous Java memcached client library Spy.Net. Please note this code is not curently possible on the C# side as several patches are pending being applied to the client (it is entirely possible that they won't be applied, so this may remain a proof-of-concept rather than a true example implementation)